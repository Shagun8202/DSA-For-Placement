#include <iostream>
#include<queue>
using namespace std;
class Node{
    public:
    int data;
    Node* left;
    Node* right;
    Node(int d){
           this->data = d;
           this->left = NULL;
           this -> right = NULL;
        }
};
void levelorder(Node* root){
    queue<Node*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        Node* temp = q.front();
        q.pop();
        if(temp == NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
           cout<<temp->data<<" ";
           if(temp->left){
               q.push(temp->left);
           }
           if(temp->right){
               q.push(temp->right);
           }
        }
    }
}
Node* insertatbst(Node* root , int d){
    if(root== NULL){
        root = new Node(d);
        return root;
    }
    if(d > root->data){
      root->right =  insertatbst(root->right,d);
    }
    else{
        root->left = insertatbst(root->left,d);
    }
    return root;
}
Node* minvalue(Node* root){
    Node* temp = root;
    while(temp->left != NULL){
        temp = temp -> left;
    }
    return temp;
}
Node* maxvalue(Node* root){
    Node* temp = root;
    while(temp->right != NULL){
        temp = temp -> right;
    }
    return temp;
}

void takeinput(Node* &root){
    int data;
    cin>>data;
    while(data != -1){
       root = insertatbst(root,data);
        cin>>data;
    }
}
Node* deletenode(Node* root, int val){
    if(root == NULL){
        return root;
    }
    if(root->data == val){
        // 0 child
        if(root->left == NULL && root->right == NULL){
            delete root;
            return NULL;
        }
        // 1 child 
        // left child
        if(root->right == NULL && root->left != NULL){
            Node* temp = root->left;
            delete root;
            return temp;
        }
        // right child
        if(root->right != NULL && root->left == NULL){
            Node* temp = root->right;
            delete root;
            return temp;
        }
        // 2 child
        if(root->left != NULL && root->right != NULL){
            int mini = minvalue(root->right) ->data;
            root->data = mini;
            root->right = deletenode(root->right,mini);
            return root;
            
        }
        
    }
    else if(root->data > val){
        root->left = deletenode(root->left,val);
        return root;
    }
    else{
        root->right = deletenode(root->right,val);
        return root;
    }
    
}

int main() {
   Node* root = NULL;
   cout<<"Enter the data to create BST"<<endl;
   takeinput(root);
   cout<<"Printing the BST"<<endl;
   levelorder(root);
  cout<<"Min value"<<minvalue(root)->data<<endl;
  root = deletenode(root,50);
   levelorder(root);
 
 
  

    return 0;
}
